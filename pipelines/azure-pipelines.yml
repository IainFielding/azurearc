trigger:
- main
  ###############################################################################
  #  TF STATE VARIABLES - PLEASE UPDATE WITH THE ONES THAT YOU NEED            #
  ###############################################################################
variables:
  tf_version: "latest" # what version of terraform should be used
  tf_state_rg: "tfstate_rg" # name of the resource group to create/use for the terraform state file
  tz_state_location: "uksouth" # location of the resource group to create/use for the terraform state file
  tf_state_sku: "Standard_ZRS" # sku to use when creating the storeage account to create/use for the terraform state file
  tf_state_sa_name: "lzdemotfstatesa" # name of of the storage account to create/use for the terraform state file
  tf_state_container_name: "tfstate-default" # name of of the container to create/use for the terraform state file
  tf_environment: "arcsvc" # enviroment name, used for the statefile name
  cost_increase_alert_percentage: 5 # if the difference in costs is higher than x% then you will need to manually validate the deployment
  SUBSCRIPTION_NAME: "3fd61fe3-fdc7-4024-8ece-cfd22c4aeafd" #This is the Subscription to use for build
  SERVICEPRINCIPLE_NAME: "LandingZone-Subscription-ServiceConnection" #This is the Service Princinple to use for build

#  TF_LOG: "DEBUG"   #Uncomment this line if you wish to turn on Terraform debugging.

pool:
  vmImage: "ubuntu-latest"    #name of pool / managed build agent

stages:
  ###############################################################################
  # Run Checkov, upload results and optionally halt if there any problems found #
  ###############################################################################
  - stage: "runCheckov"
    displayName: "Checkov - Scan Terraform files"
    jobs:
      - job: "runCheckov"
        displayName: "Checkov > Pull, run and publish results of Checkov scan"
        steps:
          - bash: |
              docker pull bridgecrew/checkov
            workingDirectory: $(System.DefaultWorkingDirectory)
            displayName: "Pull > bridgecrew/checkov"

          - bash: |
              docker run --volume $(pwd):/tf bridgecrew/checkov --directory /tf --soft-fail --output junitxml > $(pwd)/CheckovReport.xml
            workingDirectory: $(System.DefaultWorkingDirectory)
            displayName: "Run > checkov"

          - task: PublishTestResults@2
            inputs:
              testRunTitle: "Checkov Results"
              failTaskOnFailedTests: false
              testResultsFormat: "JUnit"
              testResultsFiles: "CheckovReport.xml"
              searchFolder: "$(System.DefaultWorkingDirectory)"
            displayName: "Publish > Checkov scan results"

  #####################################################################################################
  # Validate Terraform - uses the following ...                                                       #
  # https://marketplace.visualstudio.com/items?itemName=charleszipp.azure-pipelines-tasks-terraform   #
  #####################################################################################################
  - stage: "validateTerraform"
    displayName: "Terraform - Validate"
    dependsOn:
      - "runCheckov"
    jobs:
      - job: "TerraformJobs"
        displayName: "Terraform > install, init and validate"
        continueOnError: false
        steps:
          - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
            inputs:
              terraformVersion: "$(tf_version)"
            displayName: "Install > terraform"

          - task: TerraformCLI@0
            inputs:
              command: "init"
              backendType: "azurerm"
              backendServiceArm: "$(SERVICEPRINCIPLE_NAME)"
              backendAzureRmSubscriptionId: '$(SUBSCRIPTION_NAME)'
              ensureBackend: true
              backendAzureRmResourceGroupName: "$(tf_state_rg)"
              backendAzureRmResourceGroupLocation: "$(tz_state_location)"
              backendAzureRmStorageAccountName: "$(tf_state_sa_name)"
              backendAzureRmStorageAccountSku: "$(tf_state_sku)"
              backendAzureRmContainerName: "$(tf_state_container_name)"
              backendAzureRmKey: "$(tf_environment).terraform.tstate"
              var-file: "sbx/sbx.tfvars"
            displayName: "Run > terraform init"

          - task: TerraformCLI@0
            inputs:
              command: "validate"
              environmentServiceName: "$(SERVICEPRINCIPLE_NAME)"
            displayName: "Run > terraform validate"

  ###################################################################################################
  # Plan Terraform - uses the following ...                                                         #
  # https://marketplace.visualstudio.com/items?itemName=charleszipp.azure-pipelines-tasks-terraform #
  # Will set some variables to trigger a terrafrom apply automatically                              #
  # if there are just changes or ask for approval if there are any                                  #
  # resouces which are being destroyed                                                              #
  ###################################################################################################

  - stage: "planTerraform"
    displayName: "Terraform - Plan"
    dependsOn:
      - "validateTerraform"
    jobs:
      - job: "TerraformJobs"
        displayName: "Terraform > install, init & plan"
        steps:
          - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
            inputs:
              terraformVersion: "$(tf_version)"
            displayName: "Install > terraform"

          - task: TerraformCLI@0
            inputs:
              command: "init"
              backendType: "azurerm"
              backendServiceArm: "$(SERVICEPRINCIPLE_NAME)"
              backendAzureRmSubscriptionId: '$(SUBSCRIPTION_NAME)'
              ensureBackend: true
              backendAzureRmResourceGroupName: "$(tf_state_rg)"
              backendAzureRmResourceGroupLocation: "$(tz_state_location)"
              backendAzureRmStorageAccountName: "$(tf_state_sa_name)"
              backendAzureRmStorageAccountSku: "$(tf_state_sku)"
              backendAzureRmContainerName: $(tf_state_container_name)
              backendAzureRmKey: "$(tf_environment).terraform.tstate"
              environmentServiceName: "$(SERVICEPRINCIPLE_NAME)"
            displayName: "Run > terraform init"

          - task: TerraformCLI@0
            inputs:
              command: "plan"
              environmentServiceName: "$(SERVICEPRINCIPLE_NAME)"
              #providerAzureRmSubscriptionId: "3fd61fe3-fdc7-4024-8ece-cfd22c4aeafd"
              publishPlanResults: "PlanResults"
              commandOptions: "-var-file=$(System.DefaultWorkingDirectory)/sbx/sbx.tfvars -out=$(System.DefaultWorkingDirectory)/terraform.tfplan -detailed-exitcode -lock=false -input=false"  
            name: "plan"
            displayName: "Run > terraform plan"

          - task: TerraformCLI@0
            inputs:
              command: "show"
              environmentServiceName: "$(SERVICEPRINCIPLE_NAME)"
              inputTargetPlanOrStateFilePath: "$(System.DefaultWorkingDirectory)/terraform.tfplan"
            displayName: "Run > terraform show"

          - bash: |
              if [ -z "$(INFRACOST_API_KEY)" ]; then
                echo "ℹ️ - No Infracost API Key has been detected - skipping task"
              else
                sudo apt-get update -qq && sudo apt-get -qq install bc curl git jq bc
                curl -sL https://github.com/infracost/infracost/releases/latest/download/infracost-linux-amd64.tar.gz | tar xz -C /tmp
                sudo mv /tmp/infracost-linux-amd64 /usr/bin/infracost
              fi
            name: "installinfracost"
            displayName: "Install > Infrascost"

          - bash: |
              if [ -z "$(INFRACOST_API_KEY)" ]; then
                echo "ℹ️ - No Infracost API Key has been detected - skipping task"
              else
                terraform show -json $(System.DefaultWorkingDirectory)/terraform.tfplan > $(System.DefaultWorkingDirectory)/output/plan.json
                infracost breakdown --format json --path $(System.DefaultWorkingDirectory)/output/plan.json > $(System.DefaultWorkingDirectory)/output/cost.json

                past_total_monthly_cost=$(jq '[.projects[].pastBreakdown.totalMonthlyCost | select (.!=null) | tonumber] | add' $(System.DefaultWorkingDirectory)/output/cost.json)
                total_monthly_cost=$(jq '[.projects[].breakdown.totalMonthlyCost | select (.!=null) | tonumber] | add' $(System.DefaultWorkingDirectory)/output/cost.json)
              mkdir $(System.DefaultWorkingDirectory)/output
                diff_cost=$(jq '[.projects[].diff.totalMonthlyCost | select (.!=null) | tonumber] | add' $(System.DefaultWorkingDirectory)/output/cost.json)
                percentage_threshold=$(cost_increase_alert_percentage)

                if [ $(echo "$past_total_monthly_cost > 0" | bc -l) = 1 ] && [ $(echo "$total_monthly_cost > 0" | bc -l) = 1 ]; then
                  percent=$(echo "scale=6; $total_monthly_cost / $past_total_monthly_cost * 100 - 100" | bc)
                fi
                if [ $(echo "$past_total_monthly_cost <= 0" | bc -l) = 1 ] && [ $(echo "$total_monthly_cost <= 0" | bc -l) = 1 ]; then
                  percent=0
                fi

                if [ -z "$percent" ]; then
                  echo "##vso[task.logissue type=warning]💰 - ℹ️ No previous cost data has been detected"
                elif [ $(echo "$percent > $percentage_threshold" | bc -l) = 1 ]; then
                  echo "##vso[task.logissue type=warning]💰 - 📈 A $percent% increase in cost have be detected. Your monthly costs are increasing from \$$past_total_monthly_cost to \$$total_monthly_cost"
                  echo "##vso[task.setvariable variable=TERRAFORM_PLAN_HAS_DESTROY_CHANGES]true"
                else
                  echo "##vso[task.logissue type=warning]💰 - 📉 An acceptable or no change in cost has been detected. Your new monthly costs are \$$total_monthly_cost from \$$past_total_monthly_cost"
                fi
              fi
            env:
              INFRACOST_API_KEY: $(INFRACOST_API_KEY)
            name: "runinfracost"
            displayName: "Run > Infrascost"
          - bash: |
              if [ "$TERRAFORM_PLAN_HAS_CHANGES" = true ] && [ "$TERRAFORM_PLAN_HAS_DESTROY_CHANGES" = false ] ; then
                echo "##vso[task.setvariable variable=HAS_CHANGES_ONLY;isOutput=true]true"
                echo "##vso[task.logissue type=warning]👍 - Changes with no destroys detected, it is safe for the pipeline to proceed automatically"
                fi
              if [ "$TERRAFORM_PLAN_HAS_CHANGES" = true ] && [ "$TERRAFORM_PLAN_HAS_DESTROY_CHANGES" = true ] ; then
                echo "##vso[task.setvariable variable=HAS_DESTROY_CHANGES;isOutput=true]true"
                echo "##vso[task.logissue type=warning]⛔️ - Changes with Destroy or Cost increase, pipeline will require a manual approval to proceed"
              fi
              if [ "$TERRAFORM_PLAN_HAS_CHANGES" != true ] ; then
                echo "##vso[task.logissue type=warning]ℹ️ - No changes detected, terraform apply will not run"
              fi
            name: "setvar"
            displayName: "Vars > Set Variables for next stage"

  #####################################################################################################
  # Auto Approval Terraform - uses the following ...                                                  #
  # https://marketplace.visualstudio.com/items?itemName=charleszipp.azure-pipelines-tasks-terraform   #
  # Will run the terraform apply if there are are only changes and                                    #
  # nothing to be destroyed                                                                           #
  #####################################################################################################

  - stage: "autoTerraform"
    displayName: "Terraform - Auto Approval"
    dependsOn:
      - "planTerraform"
    condition: |
      and
        (
          succeeded(),
          eq(dependencies.planTerraform.outputs['TerraformJobs.setvar.HAS_CHANGES_ONLY'], 'true')
        )
    jobs:
      - job: "TerraformAuto"
        displayName: "Terraform > install, init & apply"
        steps:
          - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
            inputs:
              terraformVersion: "$(tf_version)"
            displayName: "Install > terraform"

          - task: TerraformCLI@0
            inputs:
              command: "init"
              backendType: "azurerm"
              backendServiceArm: "$(SERVICEPRINCIPLE_NAME)"
              backendAzureRmSubscriptionId: '$(SUBSCRIPTION_NAME)'
              ensureBackend: true
              backendAzureRmResourceGroupName: "$(tf_state_rg)"
              backendAzureRmResourceGroupLocation: "$(tz_state_location)"
              backendAzureRmStorageAccountName: "$(tf_state_sa_name)"
              backendAzureRmStorageAccountSku: "$(tf_state_sku)"
              backendAzureRmContainerName: $(tf_state_container_name)
              backendAzureRmKey: "$(tf_environment).terraform.tstate"
            displayName: "Run > terraform init"

          - task: TerraformCLI@0
            inputs:
              command: "apply"
              environmentServiceName: "$(SERVICEPRINCIPLE_NAME)"
              commandOptions: "-var-file=$(System.DefaultWorkingDirectory)/sbx/sbx.tfvars -lock=false"
            displayName: "Run > terraform apply"

  ###################################################################################################
  # Manual Approval Terraform - uses the following ...                                              #
  # https://marketplace.visualstudio.com/items?itemName=charleszipp.azure-pipelines-tasks-terraform #
  # Will wait for changes to be approved if there are any resources                                 #
  # which are  being destroyed                                                                      #
  ###################################################################################################

  - stage: "approveTerraform"
    displayName: "Terraform - Manual Approval"
    dependsOn:
      - "planTerraform"
    condition: |
      and
        (
          succeeded(),
          eq(dependencies.planTerraform.outputs['TerraformJobs.setvar.HAS_DESTROY_CHANGES'], 'true')
        )
    jobs:
      - job: "waitForValidation"
        displayName: "Wait > Wait for manual appoval"
        pool: "server"
        timeoutInMinutes: "4320" # job times out in 3 days
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: "1440" # task times out in 1 day
            inputs:
              notifyUsers: |
                iain@iainfielding.com
              instructions: "There are resources being destroyed or the costs are increasing alot as part of this deployment, please review the output of Terraform plan before approving."
              onTimeout: "reject"

      - job: "TerraformApprove"
        displayName: "Terraform > install, init & apply"
        dependsOn: "waitForValidation"
        steps:
          - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
            inputs:
              terraformVersion: "$(tf_version)"
            displayName: "Install > terraform"

          - task: TerraformCLI@0
            inputs:
              command: "init"
              backendType: "azurerm"
              backendServiceArm: "$(SERVICEPRINCIPLE_NAME)"
              backendAzureRmSubscriptionId: '$(SUBSCRIPTION_NAME)'
              ensureBackend: true
              backendAzureRmResourceGroupName: "$(tf_state_rg)"
              backendAzureRmResourceGroupLocation: "$(tz_state_location)"
              backendAzureRmStorageAccountName: "$(tf_state_sa_name)"
              backendAzureRmStorageAccountSku: "$(tf_state_sku)"
              backendAzureRmContainerName: $(tf_state_container_name)
              backendAzureRmKey: "$(tf_environment).terraform.tstate"
            displayName: "Run > terraform init"

          - task: TerraformCLI@0
            inputs:
              command: "apply"
              environmentServiceName: "$(SERVICEPRINCIPLE_NAME)"
              commandOptions: "-var-file=$(System.DefaultWorkingDirectory)/sbx/sbx.tfvars -lock=false"
            displayName: "Run > terraform apply"